//2 pointer approach and recursion
#include <bits/stdc++.h> 
using namespace std;
void reverse(int i,int j, string &str){
   if(i>j){
      return;
   }
   swap(str[i],str[j]);
   i++;
   j--;
   reverse(i,j,str);
}
string reverseString(string str)
{
	reverse(0,str.length()-1,str);
   return str;
}
//naive for loop
void rev(string &inp){
    int n=inp.length();
    for(int i=0;i<n/2;i++){
        swap(inp[i],inp[n-i-1]);
    }
}
int main(){
    string st="axvvcxdxcxxx";
    rev(st);
    cout<<st;
    return 0;
}
//Naive Approach
#include<bits/stdc++.h>
using namespace std;
void rev(string &inp){
    int n=inp.length();
    for(int i=n;i>=0;i--){
       cout<<inp[i];
    }
}
int main(){
    string st="axvvcxdxcxxx";
    rev(st);
    return 0;
}
//direct reverse(str.begin(),str.end()) function
